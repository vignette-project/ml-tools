name: "Train Models - Volunteer"
on: 
  schedule:
      - cron:  '0 0 * * *'

jobs:
  train_headpose:
     runs-on: self-hosted
     steps:
       - uses: actions/checkout@main

       - name: Setup .NET Core
         uses: actions/setup-dotnet@v1
         with:
           dotnet-version: 3.1.301

       - name: Restore Cache 
         uses: actions/cache@v2
         id: cache
         with:
            path: |
              ./HeadPoseTraining/Dataset/
            key: ${{ runner.os }}-300wlp-${{ hashFiles('**/**.*') }}
            restore-keys: |
              ${{ runner.os }}-300wlp-

       - name: .NET Restore
         run: dotnet restore 

       - name: Pull Dataset and extract
         if: steps.cache.outputs.cache-hit != 'true'
         run: |
           curl -L https://chinodesuuu.keybase.pub/ml_datasets/300W-LP.zip?dl=1 --output 300W-LP.zip
           Expand-Archive .\300W-LP.zip .\Dataset\ 
         working-directory: HeadPoseTraining
         shell: pwsh

       - name: Create Dataset
         if: steps.cache.outputs.cache-hit != 'true'
         run: |
          pwsh tools\CreateDataset.ps1 -InputDirectory .\Dataset\300W_LP -TrainRate 8 -OutputDirectory .\Dataset\300W-LP
         working-directory: HeadPoseTraining
         shell: pwsh
      
       - name: .NET Build 
         run: dotnet build -c Release
         working-directory: HeadPoseTraining
         shell: pwsh
      
       - name: Execute Training 
         run: dotnet run -c Release -- train --dataset .\Dataset\300W-LP --gamma 0.1 --tolerance 0.001 --range 10 --output .\Dataset\300W-LP\result\
         working-directory: HeadPoseTraining

       - name: Upload Dataset results
         uses: actions/upload-artifact@master
         with:
            name: dataset-300w-lp 
            path: ./HeadPoseTraining/Dataset/300W-LP/result/

       - name: Execute SSH Debug 
         uses: mxschmitt/action-tmate@master
         with:
              sudo: true
         if: ${{ failure() }}
         timeout-minutes: 120

  train_helen:
     runs-on: self-hosted
     steps:
       - uses: actions/checkout@main

       - name: Setup .NET Core
         uses: actions/setup-dotnet@v1
         with:
           dotnet-version: 3.1.301

       - name: Restore Cache 
         uses: actions/cache@v2
         id: cache
         with:
            path: |
              ./HelenTraining/Datasets/
            key: ${{ runner.os }}-hln-${{ hashFiles('**/*.zip') }}
            restore-keys: |
              ${{ runner.os }}-hln-

       - name: Pull Datasets
         if: steps.cache.outputs.cache-hit != 'true'
         run: |
           mkdir Datasets
           cd Datasets
           curl.exe -LJO -H "Accept: application/octet-stream" http://www.ifp.illinois.edu/~vuongle2/helen/data/annotation.zip --output annontation.zip 
           curl.exe -LJO -H "Accept: application/octet-stream"  http://www.ifp.illinois.edu/~vuongle2/helen/data/helen_1.zip --output helen_1.zip 
           curl.exe -LJO -H "Accept: application/octet-stream"  http://www.ifp.illinois.edu/~vuongle2/helen/data/helen_2.zip --output helen_2.zip 
           curl.exe -LJO -H "Accept: application/octet-stream"  http://www.ifp.illinois.edu/~vuongle2/helen/data/helen_3.zip --output helen_3.zip 
           curl.exe -LJO -H "Accept: application/octet-stream"  http://www.ifp.illinois.edu/~vuongle2/helen/data/helen_4.zip --output helen_4.zip 
           curl.exe -LJO -H "Accept: application/octet-stream"  http://www.ifp.illinois.edu/~vuongle2/helen/data/helen_5.zip --output helen_5.zip 
         working-directory: HelenTraining
         shell: pwsh

       - name: .NET Restore
         run: dotnet restore 

       - name: .NET Build 
         run: dotnet build -c Release
         working-directory: HelenTraining
         shell: pwsh
      
       - name: Prepare training data
         run: |
          mkdir models
          curl -L https://chinodesuuu.keybase.pub/ml_datasets/helen_predictors.zip?dl=1 --output helen_predictors.zip
          Expand-Archive -Force helen_predictors.zip .\models\
          Copy-item -Force -Recurse -Verbose Datasets\* -Destination $PWD
          dotnet run -c Release -- generate -m "models" -p 50
         working-directory: HelenTraining

       - name: Train
         run: dotnet run -c Release -- train -x "helen\helen-dataset.xml" -t 8
         working-directory: HelenTraining

       - name: Upload Dataset results
         uses: actions/upload-artifact@master
         with:
            name: dataset-helen
            path: |
              ./HelenTraining/models/
              ./HelenTraining/helen/helen-dataset.dat

       - name: Execute SSH Debug
         if: ${{ failure() }} 
         uses: mxschmitt/action-tmate@master
         with:
              sudo: true
         timeout-minutes: 120